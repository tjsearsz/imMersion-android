type AugmentedImage {
  """
  URL location for the image that will be scanned by the device
  """
  imageURL: String!

  """
  URL location for the Model to be rendered for this Image
  """
  modelURL: String!

  """
  Redirect page when clicking the image
  """
  redirectURL: String
}

type AugmentedImage2 {
  """
  URL location for the image that will be scanned by the device
  """
  imageURL: String!

  """
  URL location for the Model to be rendered for this Image
  """
  modelURL: String!

  """
  Redirect page when clicking the image
  """
  redirectURL: String
}

input AugmentedImageInput {
  """
  URL where the image of the new model is located
  """
  imageURL: String!

  """
  URL for the model we want to create
  """
  modelURL: String!

  """
  URL where the user can click to get redirected to
  """
  redirectURL: String
}

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

type Branch {
  """
  Address of the branch
  """
  address: [Float!]!

  """
  Determines whether this branch is still available or not
  """
  isEnabled: Boolean!
}

type Company {
  """
  Brief information about the company
  """
  description: String

  """
  Determines whether the company is active or not
  """
  isEnabled: Boolean!

  """
  Name of the company
  """
  name: String!
}

input CreateBranchInput {
  """
  Address of this Branch Long/Lat
  """
  address: [Float!]!

  """
  Company where this branch belongs to
  """
  companyId: String!
}

input CreateCompanyInput {
  """
  Brief information about the new company
  """
  description: String

  """
  Name of the new company
  """
  name: String!
}

input CreateJobInput {
  """
  Augmented Image for this Job
  """
  augmentedImage: AugmentedImageInput!

  """
  Branch where this Job will be executed
  """
  branchId: String!

  """
  Complete description of the new Job
  """
  description: String!

  """
  Title of the new Job
  """
  name: String!

  """
  URL to redirect if available
  """
  redirectURL: String
}

input CreateUserInput {
  """
  Email address of the new user
  """
  email: String!

  """
  First name of the new user
  """
  firstName: String!

  """
  Last name of the user
  """
  lastName: String!

  """
  Password of the new User
  """
  password: String!
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

type Job {
  augmentedImage: AugmentedImage!

  """
  Complete description of the job
  """
  description: String!

  """
  Determines whether the job is active or not
  """
  isEnabled: Boolean!

  """
  Title of the job
  """
  name: String!

  """
  URL to redirect if available
  """
  redirectURL: String
}

"""
The response when doing login that includes the access_token
"""
type LoginPayload {
  """
  The JWT accesst token
  """
  accessToken: String!

  """
  The user entity
  """
  user: User!
}

"""
Input for doing authentication
"""
input LoginUserInput {
  """
  Email address of the new user
  """
  email: String!

  """
  Password of the new User
  """
  password: String!
}

type Mutation {
  createBranch(createBranchInput: CreateBranchInput!): Branch!

  createCompany(createCompanyInput: CreateCompanyInput!): Company!

  createJob(createJobInput: CreateJobInput!): Job!

  createUser(createUserInput: CreateUserInput!): User!

  login(loginUserInput: LoginUserInput!): LoginPayload!

  removeBranch(id: Int!): Branch!

  removeCompany(id: Int!): Company!

  removeJob(id: Int!): Job!

  removeUser(id: Int!): User!

  signIn(createUserInput: CreateUserInput!): User!

  updateAugmentedImage("AugmentedImage to be updated in a job" augmentedImageInput: UpdateJobImageInput!): Job!

  updateBranch(updateBranchInput: UpdateBranchInput!): Branch!

  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!

  updateJob(updateJobInput: UpdateJobInput!): Job!

  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
  branch: [Branch!]!

  getAllAugmentedImages: [AugmentedImage2!]!

  job(id: Int!): Job!

  user(id: Int!): User!

  """
  Find all companies that belong to the user
  """
  userCompanies(id: String!): [Company!]!
}

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

input UpdateBranchInput {
  """
  Address of this Branch Long/Lat
  """
  address: [Float!]!

  """
  ID of the branch
  """
  id: String!

  """
  Enables/disables the Branch
  """
  isEnabled: Boolean!
}

input UpdateCompanyInput {
  """
  Brief information about the new company
  """
  description: String

  """
  ID of the Company to update
  """
  id: String!

  """
  Enables/disables the company
  """
  isEnabled: Boolean!

  """
  Name of the new company
  """
  name: String!
}

"""
Data for updating the Augmented Image of a job
"""
input UpdateJobImageInput {
  """
  URL where the image of the new model is located
  """
  imageURL: String!

  """
  ID of the Job for this image
  """
  jobId: String!

  """
  URL for the model we want to create
  """
  modelURL: String!

  """
  URL where the user can click to get redirected to
  """
  redirectURL: String
}

input UpdateJobInput {
  """
  Complete description of the new Job
  """
  description: String!

  """
  ID of the Job
  """
  id: String!

  """
  Enables/disables the Job
  """
  isEnabled: Boolean!

  """
  Title of the new Job
  """
  name: String!

  """
  URL to redirect if available
  """
  redirectURL: String
}

input UpdateUserInput {
  """
  Email address of the new user
  """
  email: String!

  """
  First name of the new user
  """
  firstName: String!

  """
  ID of the user
  """
  id: String!

  """
  Last name of the user
  """
  lastName: String!
}

type User {
  """
  Email of the user
  """
  email: String!

  """
  First Name of the user
  """
  firstName: String!

  """
  Last name of the user
  """
  lastName: String!
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on ARGUMENT_DEFINITION|ENUM_VALUE|FIELD_DEFINITION|INPUT_FIELD_DEFINITION

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
